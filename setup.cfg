[pycodestyle]
# Read by pylint as well
max-line-length = 120

# Flake8 runs PyFlakes and PEP8 (pycodestyle) automatically. No need to run both
[flake8]
max-line-length = 120
max-complexity = 12
jobs = 1
exclude = build,dis,docs//conf.py/sompackage/migrations,*.eff-info,venv*,jupyter,*pycache*,.*,data,docs,docsrc

[isort]
extend_skip_glob=venv*,jupyter*,*pycache*,.*,data,docs,docsrc
profile=black

[pylint]
# Use the same ignore list that Git does
skip_gitignore = True
lin_length = 119
known-third-party=lumibot

[tool:pytest]
markers =
    apitest: marks tests as API tests (deselect with '-m "not apitest"')

# Exclude the warnings issued by underlying library that we can't fix
filterwarnings =
 	ignore::DeprecationWarning:aiohttp.*
 	ignore::DeprecationWarning:quantstats.*
 	ignore::DeprecationWarning:pandas.*
 	ignore::DeprecationWarning:pkg_resources.*

 	# Ignore the warnings from Lumibot itself that will be removed in the future
 	ignore:backtest:DeprecationWarning:tests.*

testpaths = tests
norecursedirs = docs .* *.egg* appdir jupyter *pycache* venv* .cache* .coverage* .git data docs docsrc

# .coveragerc to control coverag.py
[coverage:run]
command_line = -m pytest -m "not apitest"
branch = True
omit =
	# * so you can get all dirs
	*__init__.py

	# Dirs to ignore
	tests/*
	venv*
	.cache/
	.git/
	.cache-directory
	.pytest*
	docs/
	data/
	docsrc/
	example*
	cache*

[coverage:report]
# Regexs for lines to exclude from consideration
exclude_lines =
	# Have to re-enable the standard pragma
	pragma: no coverag

	# Don't complain about missing debug-only code
	def __repr__
	if self\.debug-only

	# Don't complain if tests don't hit defensive assertion code:
	raise AssertionError
	raise NotImplementedError

	# Don't complain if non-runable code isn't run
	if 0:
	if __name__ == __main__:

precision = 2
ignore_errors = True
show_missing = True
# Add this back in when coverage is at an acceptable level
fail_under = 40

[coverage:html]
directory = .coverage.html_report
