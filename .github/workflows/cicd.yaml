# .github/workflows/lumibot-ci-cd.yml
# ------------------------------------------------------------------
name: LumiBot CI/CD

on: [pull_request]
# permissions:
#   # Gives the action the necessary permissions for publishing new
#   # comments in pull requests.
#   pull-requests: write
#   # Gives the action the necessary permissions for editing existing
#   # comments (to avoid publishing multiple comments in the same PR)
#   contents: write
#   # Gives the action the necessary permissions for looking up the
#   # workflow that launched this workflow, and download the related
#   # artifact that contains the comment to be published
#   actions: read
jobs:
  LintAndTest:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: unit-tests

    env:
      AIOHTTP_NO_EXTENSIONS: 1
      POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
      POLYGON_IS_PAID_SUBSCRIPTION: $POLYGON_IS_PAID_SUBSCRIPTION
      THETADATA_USERNAME: ${{ secrets.THETADATA_USERNAME }}
      THETADATA_PASSWORD: ${{ secrets.THETADATA_PASSWORD }}

    steps:
      # ------------------------------------------------------------
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip

      - name: Install dependencies
        run: |
          echo "Set AIOHTTP_NO_EXTENSIONS=$AIOHTTP_NO_EXTENSIONS so that aiohttp doesn't try to install C extensions"
          python -m pip install --upgrade pip
          pip install requests
          pip install -r requirements_dev.txt
          # python setup.py install   # <-- keep commented if still flaky

      # ------------------------------------------------------------
      - name: Run Linter
        run: |
          # Remove -e flag to fail the run if issues are found
          ruff check . -e

      # ------------------------------------------------------------
      - name: Run Unit Tests with coverage
        run: |
          coverage run -m pytest -q
          coverage xml -o coverage.xml          #  -> for badge
          coverage html                         #  -> nice downloadable
          coverage report

      # Make the HTML report downloadable from the Actions artefacts tab
      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov
          retention-days: 7

      # ------------------------------------------------------------
      # Create / update the SVG badge (adds a commit to the PR branch)
      - name: Generate coverage badge
        uses: tj-actions/coverage-badge-py@v2   #  [oai_citation:0â€¡GitHub](https://github.com/tj-actions/coverage-badge-py?utm_source=chatgpt.com)
        with:
          output: coverage.svg

      # Only commit if the badge actually changed
      - name: Detect changed badge
        id: verify
        uses: tj-actions/verify-changed-files@v16
        with:
          files: coverage.svg

      - name: Commit updated badge
        if: steps.verify.outputs.files_changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add coverage.svg
          git commit -m "ci: update coverage badge"
          git push